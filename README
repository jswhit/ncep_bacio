Instructions for building and installing bacio on Unix
******************************************************

$Revision$
nceplibs support email: ncep.list.emc.nceplibs.support@noaa.gov


         Contents
         ========
  A. The easy (I hope) way...
  B. The more flexible way
    1. Configuration
    2. Building the library
    3. Testing the library
    4. Installing the library
       - NCO Install
       - GNU Install
       - Uninstalling the library
    5. Cleaning up



A. The easy (I hope) way...
===========================

To build the single (4) and double (8) precision bacio libraries, you can
use the "make_bacio_lib.sh" script specifying the build configuration. The
available build configurations are:

  gfortran.setup  ifort.setup  pgf95.setup  xlf2003.setup  ncepxlf.setup


So, on WCOSS/tide you would type:

  $ make_bacio_lib.sh ifort.setup


On the CCS you would type

  $ make_bacio_lib.sh xlf2003.setup


This script iterates over the single (4) and double (8) precision build
configurations setting the appropriate default real and integer precision
promotion compiler switches.

Some additional points:
- Both GNU-type and NCO-type installs are performed.
- The libraries are installed relative to the current directory. After
  running the script you should see two new directories containing the 
  single (4) and double (8) precision libraries.
- See section B.4 below for information about the installation directory
  structure

You can tailor the build process using this "make_bacio_lib.sh" script by
modifying the relevant build configuration setup file in the "config-setup/"
subdirectory.

Or, if you are going to be testing library builds multiple times, you can
create your own configuration setup file.




B. The more flexible way
========================

1. Configuration
----------------

If you need more flexibility in the library build you can specify the necessary 
information directly to the configure script that generates the makefiles. For
example, on WCOSS/tide:

  $ ./configure --prefix=${PWD} \
                --enable-promote=4|8 \
                --disable-big-endian-test \
                FC="ifort" \
                FCFLAGS="-O3 -g -traceback" \
                CC="icc" \
                CFLAGS="-O3 -DUNDERSCORE"

The --prefix switch sets the installation directory and defaults to /usr/local so
make sure you set it to a directory in which you have write access.

The --enable-promote switch allows you to specify the type of precision build, be it
single (4) or double (8) precision. To build the double precision library you would
use:

  --enable-promote=8

Not specifying this switch is equivalent to "--enable-promote=4".

The --disable-big-endian-test switch builds the test programs for little-endian I/O.
the default is big-endian I/O. Note that this switch does not affect the library
build at all - just the test program.

The definition of the "FC" and "CC" enviroment variables are not strictly necessary
as they default to "ifort/icc" on linux systems if available (followed by "gfortran/gcc"
and "pgf95/pgcc" if not), and "xlf2003/xlc" on AIX systems.

NOTE #1: On many systems the Gnu C compiler, gcc, is usually detected before other
         compilers so one should examine the configure output to ensure the correct
         C compiler was found. Alternatively, just specify the compiler on the command
         line.

NOTE #2: Some of the test for the double-precision library fail. This is not a problem
         with the library, just that the tests have not yet been updated for the
         double-precision build.




2. Building the library
-----------------------

To start the library build for a particular configuration, simply type

  $ make




3. Testing the library
----------------------

To run the accompanying tests using the just-built library, simply type

  $ make check

This will build and run the tests, as well as report on how many passed/failed. The
output from the (successful) test runs looks like:

    ========================================
      Running big-endian precision 4 tests...

         Running test_baciof test...
     in test_baciof,machine_endian=little_endiando_byteswap= T
     BACIO: unit test test_bacio ends normally
         SUCCESS!

         Running test_bafrio test...
     in test_bafrio,machine_endian=little_endiando_byteswap= T
     BACIO: unit test test_bafrio ends normally
         SUCCESS!

         Running test_wryte test...
     BACIO unit test: test_wryte ends normally
         SUCCESS!

    ----------------------------------------
      Passed     3 of     3 tests
      Failed     0 of     3 tests
    ----------------------------------------
    ========================================




4. Installing the library
-------------------------

Installation of the library *always* occurs into its own directory within the
directory specified by the --prefix switch. The name of the installation 
directory follows the convention:

  <library name>_<version>_<precision>

So, if the a library version (say, v2.0.2) build was configured with --prefix=$PWD
for the default precision (4) build, then the installation directory will be

  ${PWD}/bacio_v2.0.2_4
 


NCO Install
...........

To install the library conforming to the NCO organisation and naming conventions,
type:

  $ make nco_install

For a library version (say, v2.0.2) and the default precision (4), this will create
a directory called "bacio_v2.0.2_4". That directory is organised according to the
current NCO structure on CCS and WCOSS in /nwprod/lib, as shown below:

  bacio_v2.0.2_4/
    |
    |--libbacio_v2.0.2_4.a
    |
    `--incmod/
         |
         `--bacio_v2.0.2_4/
              |
              `--bacio_module.mod

The contents of the "bacio_v2.0.2_4" directory can then be moved into the official
/nwprod/lib location as needed.

Let's assume the above install was moved into "/usrx/local/nceplibs", to use the
library in this structure in your own application, the usual environment variables
would be modified something like:

  libroot="/usrx/local/nceplibs"
  FCFLAGS="-I${libroot}/incmod/bacio_v2.0.2_4 ${FCFLAGS}"
  LDFLAGS="-L${libroot} ${LDFLAGS}"
  LIBS="-lbacio_v2.0.2_4"



GNU Install
...........

To perform a GNU-type install, type:

  $ make install

For a library version (say, v2.0.2) and the default precision (4), this will create
a directory called "bacio_v2.0.2_4". That directory structure is shown below:

  bacio_v2.0.2_4/
    |
    |--include/
    |    |
    |    `--bacio_module.mod
    |
    `--lib/
         |
         `--libbacio.a

Note that the only versioned item in this type of install is the name of the
installation directory itself.

Let's assume the above install was moved into "/usrx/local/nceplibs", to use the
library in this structure in your own application, the usual environment variables
would be modified something like:

  libroot="/usrx/local/nceplibs"
  FCFLAGS="-I${libroot}/bacio_v2.0.2_4/include ${FCFLAGS}"
  LDFLAGS="-L${libroot}/bacio_v2.0.2_4/lib ${LDFLAGS}"
  LIBS="-lbacio"



Uninstalling the library
........................

To uninstall the library (assuming you haven't moved the installation directory
contents somewhere else) you can type:

  $ make uninstall
  
This will delete the created installation directory. So, for a library version
(say, v2.0.2) and the default precision (4), if your configure script invocation
was something like

  $ ./configure --prefix=${PWD} ...other command line arguments...

then the "uninstall" target will delete the "${PWD}/bacio_v2.0.2_4" directory.




5. Cleaning up
--------------

Two targets are provided for cleaning up after the build. To remove all the 
build products type

  $ make clean

To also remove all the configuration products (i.e. the makefiles) type

  $ make distclean
